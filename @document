## API Endpoints for Matching

**1. Retrieve User Data:**

- **Endpoint:** `/matching/user-data`
- **Method:** GET
- **Query Parameters:**
    - `userIds` (optional):  A comma-separated list of user IDs. If not provided, data for all users will be returned.
- **Response:** An array of `UserDataDto` objects. Each object contains the following:
    - `id`: User ID
    - `email`: User's email address
    - `name`: User's full name
    - `phoneNumber`: User's phone number
    - `address`: User's street address
    - `city`: User's city
    - `state`: User's state
    - `zipCode`: User's zip code
    - `region`: User's region
    - `preferences`: An array of user preferences
    - `interests`: An array of user interests
- **Example:**
    ```bash
    GET /matching/user-data?userIds=1,2,3
    ```

**2. Store Matching Results:**

- **Endpoint:** `/matching/results`
- **Method:** POST
- **Request Body:** `MatchingResultsDto` object
    - `groups`: Array of `MatchingGroupDto` objects.
        - `groupId`: Unique identifier for the group.
        - `users`: Array of `User` objects within the group.
    - `notificationId`: Notification ID for the matching results.
- **Authorization:** Admin role required (JWT authentication).
- **Example:**
    ```bash
    POST /matching/results
    {
      "groups": [ /* ... matching group data */ ],
      "notificationId": "some-uuid"
    }
    ```


**3. Retrieve Matching Results:**

- **Endpoint:** `/matching/results`
- **Method:** GET
- **Query Parameters:**
    - `userId` (optional): Filters results to only include groups containing this user ID.
- **Response:** A `MatchingResultsDto` object.
- **Example:**
    ```bash
    GET /matching/results?userId=1
    ```